### A better scheme
Let's use Python-like Pseudocode  for an example.

#### Basic idea
* Use strings to represent binary data
* LC3 as an object

	class CPU(wordLength):
		regNum = 8
		regFile = ['0' * wordLength] * 8
		# etc.

		def step():
			IR = readMem(PC)
			PC = PC + 1
			opcode = matchOpcode(IR)
			execute[opcode](parseOperands[opcode](IR))
			# etc.

		def add(SR1, SR2, DR):
			regFile[DR] = regFile[SR1] + regFile[SR2]

		def BR(addr):
			PC = addr

	class Memory(wordLength, size):
		data = [ '0' * wordLength ] * size

		def read(addr):
			return data[addr]

		def write(addr, value):
			data[addr] = value

	class LC3_Core:
		wordLength = 16
		size = 16

		mem = Memory(wordLength, size)
		cpu = CPU(wordLength)

		cpu.writeMem = mem.write
		cpu.readMem = mem.read


		def loadInstructions(insts)
		def step
		def continue
		def setReg
		def setMem
		# ...

#### Intricate details
* The representation of numbers/data: binary? hex? string? integer?
* How to manipulate data with different width?
* How to detect run-time errors
* How to maintain a strict data interface between different modules